package com.fqyuan.sort;

import static com.fqyuan.utils.Utils.genRanArr;
import static com.fqyuan.utils.Utils.printArr;

import org.junit.Test;

public class HeapSort {
	public void heapSort(int[] arr) {
		int n = arr.length - 1;
		// Build heap(rearrange the array)
		for (int i = n / 2; i >= 0; i--)
			heapify(arr, n, i);
		// One by one extract an element from heap.
		for (int i = n; i >= 0; i--) {
			swap(arr, 0, i);
			heapify(arr, i, 0);
		}
	}

	// Heapify a subtree rooted with node i, which is an index in arr[], n is
	// the size of the heap.
	private void heapify(int[] arr, int i) {
		int n = arr.length - 1;
		int max = i; // Initialize max as root
		int l = 2 * i; // left = 2*i
		int r = 2 * i + 1; // right = 2*1+1

		// If left child is larger than the root.
		if (l <= n && arr[l] > arr[max])
			max = l;
		// If right child is larger than the root
		if (l <= n && arr[r] > arr[max])
			max = r;

		// If max is not root
		if (max != i) {
			swap(arr, i, max);
			// Recursively heapify the affected sub-tree
			heapify(arr, max);
		}
	}

	private void swap(int[] arr, int i, int j) {
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}

	@Test
	public void test() {
		int len = 30;
		int[] arr = genRanArr(len);
		printArr(arr);
		heapSort(arr);
		printArr(arr);
	}
}
