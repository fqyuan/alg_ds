package com.fqyuan.sort;

import java.util.Random;

import org.junit.Test;

public class SortUtils {

	/**
	 * @param arr
	 * @author fqyuan
	 * @see 这里的swap操作在第二层循环之外，减少了交换的次数，改善了部分性能。
	 */
	public static void selectSort(int[] arr) {

		for (int i = 0; i < arr.length - 1; i++) {
			int minIndex = i;
			for (int j = i + 1; j < arr.length; j++) {
				if (arr[minIndex] > arr[j])
					minIndex = j;
			}
			int temp = arr[i];
			arr[i] = arr[minIndex];
			arr[minIndex] = temp;
		}
	}

	/**
	 * @param arr
	 * @author fqyuan
	 * @see 加入了sorted flag之后，如果是已经排序好的数组，可以大幅减少排序swap次数。
	 */
	public static void bubbleSort(int[] arr) {
		for (int i = 0; i < arr.length - 1; i++) {
			boolean sorted = true;
			for (int j = 0; j < arr.length - i - 1; j++) {
				if (arr[j] > arr[j + 1]) {
					int temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
					sorted = false;
				}
			}
			if (sorted)
				break;
		}
	}

	/**
	 * @param arr
	 * @author fqyuan
	 * @see A little twisted among the 3 simple sort method:
	 *      select/insert/bubble.
	 */
	public static void insertSort(int[] arr) {
		for (int i = 1; i < arr.length; i++) {
			int key = arr[i];
			int j = i - 1;
			// Find the position to insert at: j.
			for (; j >= 0 && arr[j] > key; j--)
				arr[j + 1] = arr[j];
			arr[j + 1] = key;
		}
	}

	public static void mergeSort(int[] arr) {
		if (arr.length < 2)
			return;
		int mid = arr.length / 2;
		int[] left = new int[arr.length / 2];
		int[] right = new int[arr.length - arr.length / 2];
		for (int i = 0; i < mid; i++)
			left[i] = arr[i];
		for (int i = mid; i < arr.length; i++)
			right[i - mid] = arr[i];

		mergeSort(left);
		mergeSort(right);
		merge(left, right, arr);
	}

	private static void merge(int[] left, int[] right, int[] arr) {
		int nL = left.length;
		int nR = right.length;
		int i = 0, j = 0, k = 0;
		while (i < nL && j < nR) {
			if (left[i] <= right[j])
				arr[k++] = left[i++];
			else
				arr[k++] = right[j++];
		}
		if (i < nL) {
			while (i < nL)
				arr[k++] = left[i++];
		} else {
			while (j < nR)
				arr[k++] = right[j++];
		}

	}

	public void printArr(int arr[]) {
		for (int val : arr)
			System.out.print(val + " ");
		System.out.println();
	}

	@Test
	public void test() {
		Random random = new Random();
		int[] arr = new int[10];
		for (int i = 0; i < 10; i++)
			arr[i] = random.nextInt(100);
		printArr(arr);
		mergeSort(arr);
		printArr(arr);
	}
}
