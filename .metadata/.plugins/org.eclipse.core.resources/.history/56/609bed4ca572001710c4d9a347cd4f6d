package com.fqyuan.search;

import java.util.Arrays;
import java.util.Random;

import javax.xml.stream.events.EndDocument;

import org.junit.Test;

public class SearchUtils {
	public int linearSearch(int[] arr, int target) {
		int index = -1;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] == target) {
				index = i;
				break;
			}
		}
		return index;
	}

	public int binarySearch(int[] arr, int target) {
		int index = -1;
		int lower = 0;
		int upper = arr.length - 1;
		boolean found = false;
		while (!found) {
			if (lower > upper)
				return -1;
			int mid = lower + (upper - lower) / 2;

			if (target < arr[mid])
				upper = mid - 1;
			else if (target > arr[mid])
				lower = mid + 1;
			else {
				index = mid;
				found = true;
			}
		}

		return index;
	}

	private int binarySearch(int[] arr, int target, int low, int high) {
		int mid = low + (high - low) / 2;
		if (low > high)
			return -1;

		if (target == arr[mid])
			return mid;
		else if (target < arr[mid])
			return binarySearch(arr, target, low, mid - 1);
		else
			return binarySearch(arr, target, mid + 1, high);
	}


	@Test
	public void test() {
		final int len = 10000000;
		int[] arr = new int[len];
		Random random = new Random();
		for (int i = 0; i < arr.length; i++)
			arr[i] = random.nextInt(len);
		Arrays.sort(arr);

		int result = -1;
		long startTime = System.currentTimeMillis();
		for (int i = 0; i < 1000; i++)
			result = linearSearch(arr, random.nextInt(len));
		long endTime = System.currentTimeMillis();
		System.out.println("Result is: " + result + "\tLinear Search time taken: " + (endTime - startTime));

		startTime = System.currentTimeMillis();
		for (int i = 0; i < 10000000; i++)
			result = binarySearch(arr, random.nextInt(len));
		endTime = System.currentTimeMillis();
		System.out.println("Result is: " + result + "\tBinary Search time taken: " + (endTime - startTime));

	}
}
