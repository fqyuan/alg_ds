package com.fqyuan.search;

import java.util.Arrays;
import java.util.Random;

import org.junit.Test;

public class SearchUtils {
	public int linearSearch(int[] arr, int target) {
		int index = -1;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] == target) {
				index = i;
				break;
			}
		}
		return index;
	}

	public int binarySearch(int[] arr, int target) {
		int index = -1;
		int lower = 0;
		int upper = arr.length - 1;
		int mid;
		while (lower <= upper) {
			mid = lower + (upper - lower) / 2;

			if (target < arr[mid])
				upper = mid - 1;
			else if (target > arr[mid])
				lower = mid + 1;
			else {
				index = mid;
			}
		}

		return index;
	}

	public int binarySearchRecur(int[] arr, int target) {
		return binarySearch(arr, target, 0, arr.length - 1);
	}

	private int binarySearch(int[] arr, int target, int low, int high) {
		int mid = low + (high - low) / 2;
		if (low > high)
			return -1;

		if (target == arr[mid])
			return mid;
		else if (target < arr[mid])
			return binarySearch(arr, target, low, mid - 1);
		else
			return binarySearch(arr, target, mid + 1, high);
	}

	public static int interpolSearch(int[] arr, int target) {
		int low = 0;
		int high = arr.length - 1;
		int mid;
		int index = -1;
		while (target <= arr[high] && target >= arr[low]) {
			if (arr[low] == arr[high])
				return (low + high) / 2;

			mid = low + ((high - low) / (arr[high] - arr[low])) * (target - arr[low]);
			if (arr[mid] == target) {
				index = mid;
				break;
			} else if (target < arr[mid])
				high = mid - 1;
			else {
				low = mid + 1;
			}
		}
		return index;
	}

	public static int interpolSearchRec(int[] arr, int target) {
		return interpolSearchRec(arr, target, 0, arr.length - 1);
	}

	private static int interpolSearchRec(int[] arr, int target, int low, int high) {
		if (low > high)
			return -1;
		// if(arr[])
		int mid = low + (high - low) / (arr[high] - arr[low]) * (target - arr[low]);
		if (arr[mid] == target)
			return mid;
		else if (target < arr[mid])
			return interpolSearchRec(arr, target, low, mid - 1);
		else {
			return interpolSearchRec(arr, target, mid + 1, high);
		}
	}

	public static int interpolationSearch(int[] array, int value, int from, int to) {
		if (array[from] == value)
			return from;
		else if (from == to || array[from] == array[to])
			return -1; // not found

		// probable position of the searched value
		int index = from + ((to - from) / (array[to] - array[from])) * (value - array[from]);

		if (array[index] == value)
			return index;// found
		// continue in the right part of the array
		else if (array[index] < value)
			return interpolationSearch(array, value, index + 1, to);
		// continue in the left part of the array
		else
			return interpolationSearch(array, value, from, index - 1);
	}

	public void printArr(int[] arr) {
		for (int i = 0; i < arr.length; i++)
			System.out.print(arr[i] + " ");
		System.out.println();
	}

	@Test
	public void test() {
		final int len = 10000000;
		int[] arr = new int[len];
		Random random = new Random();
		for (int i = 0; i < arr.length; i++)
			arr[i] = random.nextInt(len);
		Arrays.sort(arr);

		int result = -1;
		long startTime = System.currentTimeMillis();
		for (int i = 0; i < 1000; i++)
			result = linearSearch(arr, random.nextInt(len));
		long endTime = System.currentTimeMillis();
		System.out.println("Result is: " + result + "\tLinear Search time taken: " + (endTime - startTime));

		startTime = System.currentTimeMillis();
		for (int i = 0; i < 10000000; i++)
			result = binarySearch(arr, random.nextInt(len));
		endTime = System.currentTimeMillis();
		System.out.println("Result is: " + result + "\tBinary Search time taken: " + (endTime - startTime));

	}

	@Test
	public void test1() {
		Random random = new Random();
		int[] arr = new int[10];
		for (int i = 0; i < arr.length; i++)
			arr[i] = random.nextInt(10);
		printArr(arr);
		Arrays.sort(arr);
		printArr(arr);

		int result = interpolSearch(arr, 5);
		if (result == -1)
			System.out.println("Not found.");
		else
			System.out.println("The element index is: " + result);
	}
}
